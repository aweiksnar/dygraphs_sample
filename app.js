// Generated by CoffeeScript 1.7.1
(function() {
  var CanvasState, Shape, canvasState, graph, item, onDoubleClick, onMouseDown, onMouseMove, onMouseUp;

  Shape = (function() {
    function Shape(x, y, w, h, fill) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.w = w != null ? w : 1;
      this.h = h != null ? h : 1;
      this.fill = fill != null ? fill : "rgba(255, 255, 0, .6)";
    }

    Shape.prototype.draw = function(ctx) {
      ctx.fillStyle = this.fill;
      return ctx.fillRect(this.x, this.y, this.w, this.h);
    };

    return Shape;

  })();

  CanvasState = (function() {
    function CanvasState(graph) {
      this.graph = graph;
      this.ctx = graph.canvas_ctx_;
      this.canvas = graph.canvas;
      this.annotations = [];
    }

    CanvasState.prototype.addAnnotation = function(annotation) {
      return this.annotations.push(annotation);
    };

    return CanvasState;

  })();

  onMouseDown = function(event, g, context) {
    return context.initializeMouseDown(event, g, context);
  };

  onDoubleClick = function(event, g, context) {
    return g.updateOptions({
      dateWindow: null,
      valueRange: null
    });
  };

  onMouseMove = function(event, g, context) {
    return console.log("event", event, "g", g, "context", context);
  };

  onMouseUp = function(event, g, context) {
    var a, annotation, coordinates, i, left, right, shape, _i, _len, _ref, _results;
    left = g.toDomCoords(g.toDataXCoord(context.dragStartX), 0)[0];
    right = g.toDomCoords(g.toDataXCoord(event.layerX), 1)[0];
    shape = new Shape(left, g.layout_.area_.y, right - left, g.layout_.area_.h);
    shape.draw(g.canvas_ctx_);
    annotation = {
      "x": left,
      "y": g.layout_.area_.y,
      "width": right - left,
      "height": g.layout_.area_.h
    };
    canvasState.addAnnotation(annotation);
    _ref = canvasState.annotations;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      a = _ref[i];
      coordinates = "" + (g.toDataXCoord(a.x)) + ", " + (g.toDataXCoord(a.x + a.width)) + "</br>";
      if (i === canvasState.annotations.length - 1) {
        _results.push(document.getElementById('annotations').innerHTML += coordinates);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  graph = new Dygraph(document.getElementById("graph"), (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = light_curve_data.length; _i < _len; _i++) {
      item = light_curve_data[_i];
      _results.push([item['x'], item['y']]);
    }
    return _results;
  })(), {
    drawPoints: true,
    drawXGrid: true,
    drawYGrid: false,
    drawAxesAtZero: true,
    strokeWidth: 0,
    color: "orange",
    width: 1000,
    height: 400,
    isZoomedIgnoreProgrammaticZoom: true,
    showLabelsOnHighlight: false,
    drawHighlightPointCallback: "false",
    interactionModel: {
      mousedown: onMouseDown,
      mousemove: onMouseMove,
      mouseup: onMouseUp,
      dblclick: onDoubleClick
    },
    showRangeSelector: true,
    rangeSelectorHeight: 30,
    rangeSelectorPlotStrokeColor: 'grey',
    rangeSelectorPlotFillColor: 'lightgrey',
    underlayCallback: function(canvas, area, g) {
      var bottom_left, left, right, top_right;
      console.log("canvas", canvas, "Area", area, "g", g);
      bottom_left = g.toDomCoords(0, -20);
      top_right = g.toDomCoords(area.w, +20);
      left = bottom_left[0];
      right = top_right[0];
      canvas.fillStyle = "#000";
      return canvas.fillRect(left, area.y, right - left, area.h);
    }
  });

  canvasState = new CanvasState(graph);

  window.canvasState = canvasState;

}).call(this);
